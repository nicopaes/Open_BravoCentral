@page "/social/chart"

@using ChartJs.Blazor
@using ChartJs.Blazor.BarChart.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.RadarChart
@using ChartJs.Blazor.Util
@using Data
@using System.Drawing
@using Productivity
@using WHO5

<RadzenCard Class="rz-background-color-base-200 m-0 p-0">
    <div class="col text-center">
        <RadzenText class="m-0 p-2 py-0" TextStyle="TextStyle.DisplayH3">Gráficos: Indíces Sociais</RadzenText>
    </div>
</RadzenCard>
<RadzenTabs TabPosition="TabPosition.Top" Class="w-100 my-0 mx-0 mx-auto"
    RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Text="Total Rituais">
            <RadzenCard class="rz-shadow-3 rz-border-radius-3" style="width: 100%; height: 36rem;">
                <div class="row text-center mx-auto" style="width: 68rem">
                    <div class="col">
                        <Chart Config="_config" @ref="_chart"></Chart>
                    </div>
                </div>
            </RadzenCard>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Dailys e Reports">
            <RadzenCard class="rz-shadow-3 rz-border-radius-3" style="width: 100%; height: 36rem;">
                <div class="row text-center mx-auto" style="width: 68rem">
                    <div class="col">
                        <Chart Config="_lineConfig" @ref="_lineChart"></Chart>
                    </div>
                </div>
            </RadzenCard>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Total Rituais e Indicadores de Saúde Mental">
            <RadzenCard class="rz-shadow-3 rz-border-radius-3" style="width: 100%; height: 36rem;">
                <div class="row text-center mx-auto" style="width: 68rem">
                    <div class="col">
                        <Chart Config="_lineConfig2" @ref="_lineChart2"></Chart>
                    </div>
                </div>
            </RadzenCard>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Total Rituais e Indicadores de Produtividade">
            <RadzenCard class="rz-shadow-3 rz-border-radius-3" style="width: 100%; height: 36rem;">
                <div class="row text-center mx-auto" style="width: 68rem">
                    <div class="col">
                        <Chart Config="_lineConfig3" @ref="_lineChart3"></Chart>
                    </div>
                </div>
            </RadzenCard>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>


@code
{
    private Chart _chart;
    private Chart _lineChart;
    private Chart _lineChart2;
    private Chart _lineChart3;
    private LineConfig _config;
    private LineConfig _lineConfig;
    private LineConfig _lineConfig2;
    private LineConfig _lineConfig3;
    private bool changeLines = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _config = Utils.GetDefaultLineConfigWeeks();

        _config.Data.Datasets.Clear();
        _lineConfig = Utils.GetDefaultLineConfigWeeks(); //Copy COnfigs
        _lineConfig2 = Utils.GetDefaultLineConfigWeeks(); //Copy COnfigs
        _lineConfig3 = Utils.GetDefaultLineConfigWeeks(); //Copy COnfigs

        for (int i = 0; i < DbMirror.main.listWeeks.Count; i++)
        {
            _config.Data.Labels.Add(DbMirror.main.listWeeks[i].ptbrName);
            _lineConfig.Data.Labels.Add(DbMirror.main.listWeeks[i].ptbrName);
            _lineConfig2.Data.Labels.Add(DbMirror.main.listWeeks[i].ptbrName);
            _lineConfig3.Data.Labels.Add(DbMirror.main.listWeeks[i].ptbrName);
        }

        foreach (User user in DbMirror.main.users)
        {
            _config.Data.Datasets.Add(CreateRitualsDataset(user));            
            //
            _lineConfig.Data.Datasets.Add(CreateDailysDataset(user));
            _lineConfig.Data.Datasets.Add(CreateReportsDataset(user));
            //
            _lineConfig2.Data.Datasets.Add(CreateRitualsDataset(user));
            _lineConfig2.Data.Datasets.Add(Who5Chart.CreateWho5FinalPercentPerUser(user));
            //
            _lineConfig3.Data.Datasets.Add(CreateRitualsDataset(user));
            _lineConfig3.Data.Datasets.Add(ProductivityChart.CreatePeceptionDashedPerWeek(user));
        }        

        if (_chart != null)
        {
            _chart.Update();
        }
    }

    public static int GetRitualPerWeekByUser(int week, User user)
    {
        if (DbMirror.main.rituals == null || DbMirror.main.rituals.Count == 0)
        {
            return 0;
        }

        List<Ritual> filteredListOfRitualsByUser = DbMirror.main.rituals.Where(x => x.author ==
        user.name).ToList();

        if (filteredListOfRitualsByUser.Count == 0) return 0;

        Week weekselected = DbMirror.main.listWeeks[week];

        List<Ritual> ritualsUserThatWeek = filteredListOfRitualsByUser.Where(x =>
        Utils.IsBetween(x.date, weekselected.dayStart, weekselected.dayEnd)).ToList();

        return ritualsUserThatWeek.Count;
    }

    public static int GetDailyPerWeekByUser(int week, User user)
    {
        if (DbMirror.main.rituals == null || DbMirror.main.rituals.Count == 0)
        {
            return 0;
        }

        List<Ritual> filteredListOfRitualsByUser = DbMirror.main.rituals.Where(x => x.author ==
        user.name).ToList();

        if (filteredListOfRitualsByUser.Count == 0) return 0;

        Week weekselected = DbMirror.main.listWeeks[week];

        List<Ritual> ritualsUserThatWeek = filteredListOfRitualsByUser.Where(x =>
        Utils.IsBetween(x.date, weekselected.dayStart, weekselected.dayEnd) && x.ritualType == "daily").ToList();

        return ritualsUserThatWeek.Count;
    }

    public static int GetReportPerWeekByUser(int week, User user)
    {
        if (DbMirror.main.rituals == null || DbMirror.main.rituals.Count == 0)
        {
            return 0;
        }

        List<Ritual> filteredListOfRitualsByUser = DbMirror.main.rituals.Where(x => x.author ==
        user.name).ToList();

        if (filteredListOfRitualsByUser.Count == 0) return 0;

        Week weekselected = DbMirror.main.listWeeks[week];

        List<Ritual> ritualsUserThatWeek = filteredListOfRitualsByUser.Where(x =>
        Utils.IsBetween(x.date, weekselected.dayStart, weekselected.dayEnd) && x.ritualType == "report").ToList();

        return ritualsUserThatWeek.Count;
    }

    public static LineDataset<int> CreateRitualsDataset(User user)
    {
        LineDataset<int> dataset = new LineDataset<int>()
        {
            Label = $"Rituais Total: {user.displayName}",
            BackgroundColor = ColorUtil.FromDrawingColor(user.colorSecundary),
            BorderColor = ColorUtil.FromDrawingColor(user.colorPrimary),
            Fill = FillingMode.Disabled
        };

        for (int i = 0; i < DbMirror.main.listWeeks.Count; i++)
        {
            dataset.Add(GetRitualPerWeekByUser(i, user));
        }

        return dataset;
    }

    public static LineDataset<int> CreateDailysDataset(User user)
    {
        LineDataset<int> dataset = new LineDataset<int>()
        {
            Label = $"Dailys: {user.displayName}",
            BackgroundColor = ColorUtil.FromDrawingColor(user.colorSecundary),
            BorderColor = ColorUtil.FromDrawingColor(user.colorPrimary),
            Fill = FillingMode.Disabled,
            BorderDash = new int[2] { 3, 6 }
        };

        for (int i = 0; i < DbMirror.main.listWeeks.Count; i++)
        {
            dataset.Add(GetDailyPerWeekByUser(i, user));
        }

        return dataset;
    }

    public static LineDataset<int> CreateReportsDataset(User user)
    {
        LineDataset<int> dataset = new LineDataset<int>()
        {
            Label = $"Reports: {user.displayName}",
            BackgroundColor = ColorUtil.FromDrawingColor(user.colorSecundary),
            BorderColor = ColorUtil.FromDrawingColor(user.colorPrimary),
            Fill = FillingMode.Disabled,
            BorderDash = new int[2] { 10, 15 }
        };

        for (int i = 0; i < DbMirror.main.listWeeks.Count; i++)
        {
            dataset.Add(GetReportPerWeekByUser(i, user));
        }

        return dataset;
    }

    protected void ChangeLines()
    {
        changeLines = !changeLines;
        @* _config.Options.ShowLines = changeLines; *@
        for (int i = 0; i < _config.Data.Datasets.Count; i++)
        {
            var data = (LineDataset<float>)_config.Data.Datasets[i];
            if (data.Label != "Mediana" && data.Label != "Média")
            {
                data.ShowLine = changeLines;
            }
        }
        _chart.Update();
    }
}